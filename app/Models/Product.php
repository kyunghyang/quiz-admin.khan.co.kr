<?php

namespace App\Models;

use App\Enums\DiscountType;
use Carbon\Carbon;
use Carbon\Traits\Date;
use http\Env\Request;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use App\Traits\ModelTrait;

class Product extends Model implements HasMedia
{
    use HasFactory, InteractsWithMedia;
    use ModelTrait, SoftDeletes;

    protected $fillable = [
        "origin_product_id",
        "product_id",
        "mood_id",
        "usage_id",
        "category_id",
        "sub_category_id", // 이거 관리자에서 category 클릭 시 해당 카테고리의 서브카테고리만 나오게 설정해야돼
        "title",
        "value_discount", // 할인값
        "price",
        "discounted_price",
        "count_view",
        "count_order",
        "type_discount",

        // 이 사이트 종속 특수속성
        "department_store",
        "direct_store",
        "agency_store",
        "represent",
        "color",
        "code",
        "need_delivery",

        // 주문용
        "for_order",
        "count",
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function($model){
            if($model->sub_category_id){
                $subCategory = SubCategory::find($model->sub_category_id);

                $model->category_id = $subCategory->category_id;
            }

            $model->discounted_price = $model->getDiscountedPrice();
        });

        self::updating(function($model){
            if($model->sub_category_id){
                $subCategory = SubCategory::find($model->sub_category_id);

                $model->category_id = $subCategory->category_id;
            }

            $model->discounted_price = $model->getDiscountedPrice();
        });

        // softDeleted
        self::deleted(function($model){
            $model->forOrderProducts()->delete();
        });
    }

    protected $appends = [
        "img",
        "details",
        "isLike"
    ];

    public function registerMediaCollections():void
    {
        $this->addMediaCollection('img')->singleFile();
        $this->addMediaCollection('details');
    }

    public function getIsLikeAttribute()
    {
        if(auth()->user())
            return auth()->user()->likes()->where("product_id", $this->id)->first() ? 1 : 0;

        return 0;
    }

    public function getImgAttribute()
    {
        if($this->hasMedia('img')) {
            $media = $this->getMedia('img')[0];

            return [
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return null;
    }

    public function getDetailsAttribute()
    {
        $items = [];

        if($this->hasMedia('details')) {
            $medias = $this->getMedia('details');

            foreach($medias as $media){
                $items[] = [
                    "name" => $media->file_name,
                    "url" => $media->getFullUrl()
                ];
            }
        }

        return $items;
    }

    public static function getFiltered($data)
    {
        $products = new Product();

        $products = $products->where("for_order", false)->where("product_id", null);

        if(isset($data["word"]))
            $products = $products->where("title", "LIKE", "%".$data["word"]."%");

        if(isset($data["category_id"]))
            $products = $products->where("category_id", $data["category_id"]);

        if(isset($data["sub_category_id"]))
            $products = $products->where("sub_category_id", $data["sub_category_id"]);

        if(isset($data["mood_id"]))
            $products = $products->where("mood_id", $data["mood_id"]);

        if(isset($data["usage_id"]))
            $products = $products->where("usage_id", $data["usage_id"]);

        return $products;
    }

    public static function createForOrderProduct($product, $count, $options = [], $color = null)
    {
        $createdProduct = Product::create(array_merge($product->toArray(), [
            "origin_product_id" => $product->id,
            "for_order" => true,
            "count" => $count,
            "color" => $color // #복붙주의 - 일반적인 쇼핑몰에선 컬러 안쓰겠지
        ]));

        /*if($product->hasMedia("img")) {
            $media = $product->getMedia('img')[0];

            $createdProduct->addMediaFromUrl($media->getFullUrl())->toMediaCollection("img", "s3");
        }*/

        if(is_array($options)){
            foreach($options as $option){
                $foundOptionProduct = $product->optionProducts()->find($option["id"]);

                if($foundOptionProduct) {
                    if(isset($option["id"]) && isset($option["count"]) && $option["count"] > 0)
                        $createdProduct->optionProducts()->create(array_merge($foundOptionProduct->toArray(), [
                            "origin_product_id" => $foundOptionProduct->id,
                            "count" => $option["count"],
                            "for_order" => true
                        ]));
                }
            }
        }

        return $createdProduct;
    }

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function subCategory()
    {
        return $this->belongsTo(SubCategory::class);
    }

    public function mood()
    {
        return $this->belongsTo(Mood::class);
    }

    public function usage()
    {
        return $this->belongsTo(Usage::class);
    }


    public function orders()
    {
        return $this->belongsToMany(Order::class);
    }

    public function originProduct()
    {
        return $this->belongsTo(Product::class, "origin_product_id");
    }

    public function orderProducts()
    {
        return $this->hasMany(OrderProduct::class);
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }

    public function optionProducts()
    {
        return $this->hasMany(Product::class);
    }

    public function forOrderProducts()
    {
        return $this->hasMany(Product::class, "origin_product_id");
    }

    public function colors()
    {
        return $this->hasMany(Color::class);
    }

    public function productQnas()
    {
        return $this->hasMany(ProductQna::class);
    }

    public function getDiscountedPrice()
    {
        if($this->value_discount){
            if($this->type_discount == DiscountType::RATIO)
                return $this->price - floor($this->price / 100 * $this->value_discount);

            if($this->type_discount == DiscountType::PRICE)
                return $this->price - $this->value_discount;
        }

        return $this->price;
    }
}
